generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id
  firstName      String
  lastName       String
  username       String          @unique
  email          String          @unique
  company        String?
  credits        Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  images         UserToImage[]
  payments       Payment[]
  billingDetails BillingDetails?
  followers      Follow[]        @relation("UserFollowers") // No fields/references here
  following      Follow[]        @relation("UserFollowing") // No fields/references here
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Plan {
  id            String   @id @default(uuid())
  name          String
  costPerCredit Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserToImage {
  id             String   @id @default(uuid())
  userId         String
  imageId        String
  prompt         String
  negativePrompt String?
  guidanceScale  Float
  steps          Int
  createdAt      DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  image Image @relation(fields: [imageId], references: [id])
}

model Image {
  id             String   @id @default(uuid())
  categoryId     String?
  url            String
  completionTime Float
  createdAt      DateTime @default(now())

  category     Category?     @relation(fields: [categoryId], references: [id])
  userToImages UserToImage[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    Image[]
}

model Payment {
  id               String   @id @default(uuid())
  userId           String
  amount           Float
  currency         String
  creditsPurchased Int
  status           String
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id]) // Relation fixed
}

model BillingDetails {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  cardType        String
  cardLastFour    String
  billingAddress  String
  nextBillingDate DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
